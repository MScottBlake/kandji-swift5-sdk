//
// DeviceInformationUpdateDevice200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "kandji_sdkAPI.DeviceInformationUpdateDevice200Response")
public typealias DeviceInformationUpdateDevice200Response = kandji_sdkAPI.DeviceInformationUpdateDevice200Response

extension kandji_sdkAPI {

@objcMembers public class DeviceInformationUpdateDevice200Response: NSObject, Codable, JSONEncodable {

    public var agentInstalled: Int?
    public var agentInstalledNum: NSNumber? {
        get {
            return agentInstalled as NSNumber?
        }
    }
    public var agentVersion: String?
    public var assetTag: String?
    public var blueprintId: String?
    public var blueprintName: String?
    public var deviceId: String?
    public var deviceName: String?
    public var firstEnrollment: String?
    public var isMissing: Int?
    public var isMissingNum: NSNumber? {
        get {
            return isMissing as NSNumber?
        }
    }
    public var isRemoved: Int?
    public var isRemovedNum: NSNumber? {
        get {
            return isRemoved as NSNumber?
        }
    }
    public var lastCheckIn: String?
    public var lastEnrollment: String?
    public var lostModeStatus: String?
    public var mdmEnabled: Int?
    public var mdmEnabledNum: NSNumber? {
        get {
            return mdmEnabled as NSNumber?
        }
    }
    public var model: String?
    public var osVersion: String?
    public var platform: String?
    public var serialNumber: String?
    public var tags: AnyCodable?
    public var user: String?

    public init(agentInstalled: Int? = nil, agentVersion: String? = nil, assetTag: String? = nil, blueprintId: String? = nil, blueprintName: String? = nil, deviceId: String? = nil, deviceName: String? = nil, firstEnrollment: String? = nil, isMissing: Int? = nil, isRemoved: Int? = nil, lastCheckIn: String? = nil, lastEnrollment: String? = nil, lostModeStatus: String? = nil, mdmEnabled: Int? = nil, model: String? = nil, osVersion: String? = nil, platform: String? = nil, serialNumber: String? = nil, tags: AnyCodable? = nil, user: String? = nil) {
        self.agentInstalled = agentInstalled
        self.agentVersion = agentVersion
        self.assetTag = assetTag
        self.blueprintId = blueprintId
        self.blueprintName = blueprintName
        self.deviceId = deviceId
        self.deviceName = deviceName
        self.firstEnrollment = firstEnrollment
        self.isMissing = isMissing
        self.isRemoved = isRemoved
        self.lastCheckIn = lastCheckIn
        self.lastEnrollment = lastEnrollment
        self.lostModeStatus = lostModeStatus
        self.mdmEnabled = mdmEnabled
        self.model = model
        self.osVersion = osVersion
        self.platform = platform
        self.serialNumber = serialNumber
        self.tags = tags
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case agentInstalled = "agent_installed"
        case agentVersion = "agent_version"
        case assetTag = "asset_tag"
        case blueprintId = "blueprint_id"
        case blueprintName = "blueprint_name"
        case deviceId = "device_id"
        case deviceName = "device_name"
        case firstEnrollment = "first_enrollment"
        case isMissing = "is_missing"
        case isRemoved = "is_removed"
        case lastCheckIn = "last_check_in"
        case lastEnrollment = "last_enrollment"
        case lostModeStatus = "lost_mode_status"
        case mdmEnabled = "mdm_enabled"
        case model
        case osVersion = "os_version"
        case platform
        case serialNumber = "serial_number"
        case tags
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(agentInstalled, forKey: .agentInstalled)
        try container.encodeIfPresent(agentVersion, forKey: .agentVersion)
        try container.encodeIfPresent(assetTag, forKey: .assetTag)
        try container.encodeIfPresent(blueprintId, forKey: .blueprintId)
        try container.encodeIfPresent(blueprintName, forKey: .blueprintName)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(deviceName, forKey: .deviceName)
        try container.encodeIfPresent(firstEnrollment, forKey: .firstEnrollment)
        try container.encodeIfPresent(isMissing, forKey: .isMissing)
        try container.encodeIfPresent(isRemoved, forKey: .isRemoved)
        try container.encodeIfPresent(lastCheckIn, forKey: .lastCheckIn)
        try container.encodeIfPresent(lastEnrollment, forKey: .lastEnrollment)
        try container.encodeIfPresent(lostModeStatus, forKey: .lostModeStatus)
        try container.encodeIfPresent(mdmEnabled, forKey: .mdmEnabled)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(osVersion, forKey: .osVersion)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(serialNumber, forKey: .serialNumber)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

}
