//
// InlineObject10.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "kandji_sdkAPI.InlineObject10")
public typealias InlineObject10 = kandji_sdkAPI.InlineObject10

extension kandji_sdkAPI {

@objcMembers public class InlineObject10: NSObject, Codable, JSONEncodable {

    public var general: InlineObject10General?
    public var mdm: InlineObject10Mdm?
    public var activationLock: InlineObject10ActivationLock?
    public var filevault: InlineObject10Filevault?
    public var lostMode: InlineObject10LostMode?
    public var automatedDeviceEnrollment: InlineObject10AutomatedDeviceEnrollment?
    public var kandjiAgent: InlineObject10KandjiAgent?
    public var hardwareOverview: InlineObject10HardwareOverview?
    public var volumes: AnyCodable?
    public var network: AnyCodable?
    public var recoveryInformation: InlineObject10RecoveryInformation?
    public var users: InlineObject10Users?
    public var installedProfiles: AnyCodable?
    public var appleBusinessManager: InlineObject10AppleBusinessManager?
    public var securityInformation: InlineObject10SecurityInformation?
    public var cellular: InlineObject10Cellular?
    public var tags: AnyCodable?

    public init(general: InlineObject10General? = nil, mdm: InlineObject10Mdm? = nil, activationLock: InlineObject10ActivationLock? = nil, filevault: InlineObject10Filevault? = nil, lostMode: InlineObject10LostMode? = nil, automatedDeviceEnrollment: InlineObject10AutomatedDeviceEnrollment? = nil, kandjiAgent: InlineObject10KandjiAgent? = nil, hardwareOverview: InlineObject10HardwareOverview? = nil, volumes: AnyCodable? = nil, network: AnyCodable? = nil, recoveryInformation: InlineObject10RecoveryInformation? = nil, users: InlineObject10Users? = nil, installedProfiles: AnyCodable? = nil, appleBusinessManager: InlineObject10AppleBusinessManager? = nil, securityInformation: InlineObject10SecurityInformation? = nil, cellular: InlineObject10Cellular? = nil, tags: AnyCodable? = nil) {
        self.general = general
        self.mdm = mdm
        self.activationLock = activationLock
        self.filevault = filevault
        self.lostMode = lostMode
        self.automatedDeviceEnrollment = automatedDeviceEnrollment
        self.kandjiAgent = kandjiAgent
        self.hardwareOverview = hardwareOverview
        self.volumes = volumes
        self.network = network
        self.recoveryInformation = recoveryInformation
        self.users = users
        self.installedProfiles = installedProfiles
        self.appleBusinessManager = appleBusinessManager
        self.securityInformation = securityInformation
        self.cellular = cellular
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case general
        case mdm
        case activationLock = "activation_lock"
        case filevault
        case lostMode = "lost_mode"
        case automatedDeviceEnrollment = "automated_device_enrollment"
        case kandjiAgent = "kandji_agent"
        case hardwareOverview = "hardware_overview"
        case volumes
        case network
        case recoveryInformation = "recovery_information"
        case users
        case installedProfiles = "installed_profiles"
        case appleBusinessManager = "apple_business_manager"
        case securityInformation = "security_information"
        case cellular
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(general, forKey: .general)
        try container.encodeIfPresent(mdm, forKey: .mdm)
        try container.encodeIfPresent(activationLock, forKey: .activationLock)
        try container.encodeIfPresent(filevault, forKey: .filevault)
        try container.encodeIfPresent(lostMode, forKey: .lostMode)
        try container.encodeIfPresent(automatedDeviceEnrollment, forKey: .automatedDeviceEnrollment)
        try container.encodeIfPresent(kandjiAgent, forKey: .kandjiAgent)
        try container.encodeIfPresent(hardwareOverview, forKey: .hardwareOverview)
        try container.encodeIfPresent(volumes, forKey: .volumes)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(recoveryInformation, forKey: .recoveryInformation)
        try container.encodeIfPresent(users, forKey: .users)
        try container.encodeIfPresent(installedProfiles, forKey: .installedProfiles)
        try container.encodeIfPresent(appleBusinessManager, forKey: .appleBusinessManager)
        try container.encodeIfPresent(securityInformation, forKey: .securityInformation)
        try container.encodeIfPresent(cellular, forKey: .cellular)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

}
