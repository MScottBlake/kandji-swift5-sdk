//
// DeviceInformationGetDeviceDetails200ResponseFilevault.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "kandji_sdkAPI.DeviceInformationGetDeviceDetails200ResponseFilevault")
public typealias DeviceInformationGetDeviceDetails200ResponseFilevault = kandji_sdkAPI.DeviceInformationGetDeviceDetails200ResponseFilevault

extension kandji_sdkAPI {

@objcMembers public class DeviceInformationGetDeviceDetails200ResponseFilevault: NSObject, Codable, JSONEncodable {

    public var filevaultEnabled: AnyCodable?
    public var filevaultNextRotation: String?
    public var filevaultPrkEscrowed: Int?
    public var filevaultPrkEscrowedNum: NSNumber? {
        get {
            return filevaultPrkEscrowed as NSNumber?
        }
    }
    public var filevaultRecoverykeyType: String?
    public var filevaultRegenRequired: Int?
    public var filevaultRegenRequiredNum: NSNumber? {
        get {
            return filevaultRegenRequired as NSNumber?
        }
    }

    public init(filevaultEnabled: AnyCodable? = nil, filevaultNextRotation: String? = nil, filevaultPrkEscrowed: Int? = nil, filevaultRecoverykeyType: String? = nil, filevaultRegenRequired: Int? = nil) {
        self.filevaultEnabled = filevaultEnabled
        self.filevaultNextRotation = filevaultNextRotation
        self.filevaultPrkEscrowed = filevaultPrkEscrowed
        self.filevaultRecoverykeyType = filevaultRecoverykeyType
        self.filevaultRegenRequired = filevaultRegenRequired
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filevaultEnabled = "filevault_enabled"
        case filevaultNextRotation = "filevault_next_rotation"
        case filevaultPrkEscrowed = "filevault_prk_escrowed"
        case filevaultRecoverykeyType = "filevault_recoverykey_type"
        case filevaultRegenRequired = "filevault_regen_required"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(filevaultEnabled, forKey: .filevaultEnabled)
        try container.encodeIfPresent(filevaultNextRotation, forKey: .filevaultNextRotation)
        try container.encodeIfPresent(filevaultPrkEscrowed, forKey: .filevaultPrkEscrowed)
        try container.encodeIfPresent(filevaultRecoverykeyType, forKey: .filevaultRecoverykeyType)
        try container.encodeIfPresent(filevaultRegenRequired, forKey: .filevaultRegenRequired)
    }
}

}
