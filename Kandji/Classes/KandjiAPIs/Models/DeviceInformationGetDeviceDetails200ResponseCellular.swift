//
// DeviceInformationGetDeviceDetails200ResponseCellular.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "kandji_sdkAPI.DeviceInformationGetDeviceDetails200ResponseCellular")
public typealias DeviceInformationGetDeviceDetails200ResponseCellular = kandji_sdkAPI.DeviceInformationGetDeviceDetails200ResponseCellular

extension kandji_sdkAPI {

@objcMembers public class DeviceInformationGetDeviceDetails200ResponseCellular: NSObject, Codable, JSONEncodable {

    public var voiceRoaming: Int?
    public var voiceRoamingNum: NSNumber? {
        get {
            return voiceRoaming as NSNumber?
        }
    }
    public var dataRoaming: Int?
    public var dataRoamingNum: NSNumber? {
        get {
            return dataRoaming as NSNumber?
        }
    }
    public var cellularTechnology: Int?
    public var cellularTechnologyNum: NSNumber? {
        get {
            return cellularTechnology as NSNumber?
        }
    }
    public var subscriptions: AnyCodable?

    public init(voiceRoaming: Int? = nil, dataRoaming: Int? = nil, cellularTechnology: Int? = nil, subscriptions: AnyCodable? = nil) {
        self.voiceRoaming = voiceRoaming
        self.dataRoaming = dataRoaming
        self.cellularTechnology = cellularTechnology
        self.subscriptions = subscriptions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case voiceRoaming = "voice_roaming"
        case dataRoaming = "data_roaming"
        case cellularTechnology = "cellular_technology"
        case subscriptions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(voiceRoaming, forKey: .voiceRoaming)
        try container.encodeIfPresent(dataRoaming, forKey: .dataRoaming)
        try container.encodeIfPresent(cellularTechnology, forKey: .cellularTechnology)
        try container.encodeIfPresent(subscriptions, forKey: .subscriptions)
    }
}

}
