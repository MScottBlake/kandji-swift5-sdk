//
// VulnerabilitiesGetVulnerabilityDescription200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "kandji_sdkAPI.VulnerabilitiesGetVulnerabilityDescription200Response")
public typealias VulnerabilitiesGetVulnerabilityDescription200Response = kandji_sdkAPI.VulnerabilitiesGetVulnerabilityDescription200Response

extension kandji_sdkAPI {

@objcMembers public class VulnerabilitiesGetVulnerabilityDescription200Response: NSObject, Codable, JSONEncodable {

    public var cveId: String?
    public var cveDescription: String?
    public var cveLink: String?
    public var cvssScore: Double?
    public var kevScore: Int?
    public var kevScoreNum: NSNumber? {
        get {
            return kevScore as NSNumber?
        }
    }
    public var cvssSeverity: String?
    public var cvePublishedOn: String?
    public var cveUpdatedOn: String?
    public var devicesImpacted: Int?
    public var devicesImpactedNum: NSNumber? {
        get {
            return devicesImpacted as NSNumber?
        }
    }
    public var firstDetectionDate: String?

    public init(cveId: String? = nil, cveDescription: String? = nil, cveLink: String? = nil, cvssScore: Double? = nil, kevScore: Int? = nil, cvssSeverity: String? = nil, cvePublishedOn: String? = nil, cveUpdatedOn: String? = nil, devicesImpacted: Int? = nil, firstDetectionDate: String? = nil) {
        self.cveId = cveId
        self.cveDescription = cveDescription
        self.cveLink = cveLink
        self.cvssScore = cvssScore
        self.kevScore = kevScore
        self.cvssSeverity = cvssSeverity
        self.cvePublishedOn = cvePublishedOn
        self.cveUpdatedOn = cveUpdatedOn
        self.devicesImpacted = devicesImpacted
        self.firstDetectionDate = firstDetectionDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cveId = "cve_id"
        case cveDescription = "cve_description"
        case cveLink = "cve_link"
        case cvssScore = "cvss_score"
        case kevScore = "kev_score"
        case cvssSeverity = "cvss_severity"
        case cvePublishedOn = "cve_published_on"
        case cveUpdatedOn = "cve_updated_on"
        case devicesImpacted = "devices_impacted"
        case firstDetectionDate = "first_detection_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cveId, forKey: .cveId)
        try container.encodeIfPresent(cveDescription, forKey: .cveDescription)
        try container.encodeIfPresent(cveLink, forKey: .cveLink)
        try container.encodeIfPresent(cvssScore, forKey: .cvssScore)
        try container.encodeIfPresent(kevScore, forKey: .kevScore)
        try container.encodeIfPresent(cvssSeverity, forKey: .cvssSeverity)
        try container.encodeIfPresent(cvePublishedOn, forKey: .cvePublishedOn)
        try container.encodeIfPresent(cveUpdatedOn, forKey: .cveUpdatedOn)
        try container.encodeIfPresent(devicesImpacted, forKey: .devicesImpacted)
        try container.encodeIfPresent(firstDetectionDate, forKey: .firstDetectionDate)
    }
}

}
