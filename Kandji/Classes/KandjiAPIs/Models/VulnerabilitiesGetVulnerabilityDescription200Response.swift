//
// VulnerabilitiesGetVulnerabilityDescription200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "kandji_sdkAPI.VulnerabilitiesGetVulnerabilityDescription200Response")
public typealias VulnerabilitiesGetVulnerabilityDescription200Response = kandji_sdkAPI.VulnerabilitiesGetVulnerabilityDescription200Response

extension kandji_sdkAPI {

@objcMembers public class VulnerabilitiesGetVulnerabilityDescription200Response: NSObject, Codable, JSONEncodable {

    public var cveId: String?
    public var cveLink: String?
    public var cveModifiedAt: String?
    public var cvePublishedAt: String?
    public var cvssScore: Double?
    public var _description: String?
    public var deviceCount: Int?
    public var deviceCountNum: NSNumber? {
        get {
            return deviceCount as NSNumber?
        }
    }
    public var epssScore: Double?
    public var firstDetectionDate: String?
    public var kevScore: Int?
    public var kevScoreNum: NSNumber? {
        get {
            return kevScore as NSNumber?
        }
    }
    public var latestDetectionDate: String?
    public var severity: String?
    public var softwareCount: Int?
    public var softwareCountNum: NSNumber? {
        get {
            return softwareCount as NSNumber?
        }
    }

    public init(cveId: String? = nil, cveLink: String? = nil, cveModifiedAt: String? = nil, cvePublishedAt: String? = nil, cvssScore: Double? = nil, _description: String? = nil, deviceCount: Int? = nil, epssScore: Double? = nil, firstDetectionDate: String? = nil, kevScore: Int? = nil, latestDetectionDate: String? = nil, severity: String? = nil, softwareCount: Int? = nil) {
        self.cveId = cveId
        self.cveLink = cveLink
        self.cveModifiedAt = cveModifiedAt
        self.cvePublishedAt = cvePublishedAt
        self.cvssScore = cvssScore
        self._description = _description
        self.deviceCount = deviceCount
        self.epssScore = epssScore
        self.firstDetectionDate = firstDetectionDate
        self.kevScore = kevScore
        self.latestDetectionDate = latestDetectionDate
        self.severity = severity
        self.softwareCount = softwareCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cveId = "cve_id"
        case cveLink = "cve_link"
        case cveModifiedAt = "cve_modified_at"
        case cvePublishedAt = "cve_published_at"
        case cvssScore = "cvss_score"
        case _description = "description"
        case deviceCount = "device_count"
        case epssScore = "epss_score"
        case firstDetectionDate = "first_detection_date"
        case kevScore = "kev_score"
        case latestDetectionDate = "latest_detection_date"
        case severity
        case softwareCount = "software_count"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cveId, forKey: .cveId)
        try container.encodeIfPresent(cveLink, forKey: .cveLink)
        try container.encodeIfPresent(cveModifiedAt, forKey: .cveModifiedAt)
        try container.encodeIfPresent(cvePublishedAt, forKey: .cvePublishedAt)
        try container.encodeIfPresent(cvssScore, forKey: .cvssScore)
        try container.encodeIfPresent(_description, forKey: ._description)
        try container.encodeIfPresent(deviceCount, forKey: .deviceCount)
        try container.encodeIfPresent(epssScore, forKey: .epssScore)
        try container.encodeIfPresent(firstDetectionDate, forKey: .firstDetectionDate)
        try container.encodeIfPresent(kevScore, forKey: .kevScore)
        try container.encodeIfPresent(latestDetectionDate, forKey: .latestDetectionDate)
        try container.encodeIfPresent(severity, forKey: .severity)
        try container.encodeIfPresent(softwareCount, forKey: .softwareCount)
    }
}

}
