//
// DeviceInformationGetDeviceDetails200ResponseRecoveryInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "kandji_sdkAPI.DeviceInformationGetDeviceDetails200ResponseRecoveryInformation")
public typealias DeviceInformationGetDeviceDetails200ResponseRecoveryInformation = kandji_sdkAPI.DeviceInformationGetDeviceDetails200ResponseRecoveryInformation

extension kandji_sdkAPI {

@objcMembers public class DeviceInformationGetDeviceDetails200ResponseRecoveryInformation: NSObject, Codable, JSONEncodable {

    public var firmwarePasswordExist: Int?
    public var firmwarePasswordExistNum: NSNumber? {
        get {
            return firmwarePasswordExist as NSNumber?
        }
    }
    public var firmwarePasswordPending: Int?
    public var firmwarePasswordPendingNum: NSNumber? {
        get {
            return firmwarePasswordPending as NSNumber?
        }
    }
    public var passwordRotationScheduled: AnyCodable?
    public var recoveryLockEnabled: Int?
    public var recoveryLockEnabledNum: NSNumber? {
        get {
            return recoveryLockEnabled as NSNumber?
        }
    }

    public init(firmwarePasswordExist: Int? = nil, firmwarePasswordPending: Int? = nil, passwordRotationScheduled: AnyCodable? = nil, recoveryLockEnabled: Int? = nil) {
        self.firmwarePasswordExist = firmwarePasswordExist
        self.firmwarePasswordPending = firmwarePasswordPending
        self.passwordRotationScheduled = passwordRotationScheduled
        self.recoveryLockEnabled = recoveryLockEnabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firmwarePasswordExist = "firmware_password_exist"
        case firmwarePasswordPending = "firmware_password_pending"
        case passwordRotationScheduled = "password_rotation_scheduled"
        case recoveryLockEnabled = "recovery_lock_enabled"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(firmwarePasswordExist, forKey: .firmwarePasswordExist)
        try container.encodeIfPresent(firmwarePasswordPending, forKey: .firmwarePasswordPending)
        try container.encodeIfPresent(passwordRotationScheduled, forKey: .passwordRotationScheduled)
        try container.encodeIfPresent(recoveryLockEnabled, forKey: .recoveryLockEnabled)
    }
}

}
